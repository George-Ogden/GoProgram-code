const size = 7,
    umpire = new Noughts_and_Crosses(7, 4),
    player = new Gamer(
        Genetic_Fully_Connected_Neural_Network.from_string({
            type: "Genetic_Fully_Connected_Neural_Network",
            activation_function_name: "tanh",
            activation_function: {},
            length: 3,
            width: 5,
            weights: [
                {
                    data: [
                        [-0.29817273384503407, 0.9619400971504237, 0.19344823585603232, -0.27387958680364277, -1.34330110036638],
                        [-0.3086265993742816, 1.1163669404211243, 0.7999584257010588, -0.2293366053353365, 0.22808208870634017],
                        [0.7509613267696704, -0.35897151911842595, -0.9415797000713593, -0.0622413142652356, 1.2686199676659622],
                        [0.24939710111384805, -1.1084216775567421, 1.978685765043695, 0.4801129581678541, 1.4590706109736762],
                        [-0.7642932118231154, 0.3006115926867179, -0.01367513261457709, 0.8335902618030842, -1.7822398285213488],
                        [-1.665846447753816, -0.39547560146995697, -0.19746986663960775, -0.40240574625434045, -0.0569355155085971],
                        [0.7289929216629458, 0.34637456585582266, -0.13444149791226578, 0.5193704753457042, -0.3549930008945942],
                        [-0.2434197210266644, -0.49447590340969205, 1.5270002203060917, -0.30252642416774006, -0.0483259311497819],
                        [-0.3732142209943199, 0.26091802906910744, -0.2707796386316227, -1.3522929118003304, 0.17425533088129752],
                        [0.1954522961586882, -0.3228238806954197, 1.118213213852353, 1.3443275121066716, 2.774384033000667],
                        [0.38654618806491803, -0.6350805091968217, -1.7521591582975673, 0.4540185826932905, 0.24492795260692812],
                        [-0.20770665119217252, -0.023996969369371603, 0.4123962587945187, -0.3363381662419145, 1.6382065592442028],
                        [0.5856485332215255, 1.198646305092208, -0.9458911904833179, -1.5291273723996808, -0.13718434659792142],
                        [-0.46024367190966176, 0.2795968263680366, 1.301049937920535, -0.9873679087839372, -0.04220024082115181],
                        [1.3768160087020767, 0.15933356594645787, 0.25400083417043473, -0.3221092484546502, 0.30804876010821325],
                        [0.48192232300823656, -1.4576652868644753, -0.36871074096790657, -0.31093902963630493, -0.5348456524269518],
                        [-0.10164951303139569, 0.15969047708374728, -0.3813158797190399, 1.046803043052933, -1.3193240564215445],
                        [-0.1191527949288056, -0.2659889341055672, 0.5073926967021368, -1.3853463085492859, -1.2312191464324567],
                        [0.4739678220748834, -0.22275992679357315, 0.23275137461362627, 0.11783623856248315, 0.1677294509979368],
                        [-0.03676816526460247, 1.3919252837080336, 1.11904809033964, -0.6409189387223104, 0.6794461295299559],
                        [0.7400612080023243, -0.743510569562869, -1.852218624113327, -0.43348569921189817, -0.514124152516188],
                        [0.1412698872417657, 0.5126765606202524, 0.05243436804536983, -0.4513717672240033, -0.18745066125393994],
                        [-0.7624372961901986, 0.30780543677138295, -0.3282448292372946, -0.24653251204371807, -1.0389610627018087],
                        [0.10858202299547046, 0.828899771745855, -1.3116500900699597, -0.21749478695029945, -0.30299992744071336],
                        [-0.5310684162510594, 0.6959155182451304, -0.8497130734579434, 0.8669660368590655, 0.506318576377471],
                        [-0.25618973181196963, 0.5618360515203874, 0.1314768760018239, 0.5270775825443821, -0.12073133725998741],
                        [-0.9370697869492204, 0.9323079089777746, -0.48237830267070536, 0.04573256327420931, -0.7096526455085037],
                        [0.3855535818032698, -1.555075378307921, 0.12331850499561618, -0.016421395468498523, 0.7908706986208456],
                        [-0.5024251606097616, -1.574553777374482, 0.8347075186805522, -0.42860838668423296, -0.8113379596798587],
                        [-0.1458888924285512, -0.09755080862886112, -0.2295372189927638, 0.0903642683360597, 1.0751031597692142],
                        [0.8032547922120088, -0.6023608108366567, -0.6485293274154824, 0.920879223740872, -0.0312553591316167],
                        [-0.597432313001597, 0.02463278166176952, -0.17517954510121836, 0.3226032521220141, 0.535969959890187],
                        [1.6997008307699546, 0.7564711540612239, 1.0211306154654154, -0.01696190201445158, 0.5318468162193861],
                        [0.27092266875500326, -0.37330757197708797, 0.47906653312457986, 1.9172864268248557, -0.6670281565001743],
                        [0.33187283661873446, 0.2220555926173442, 1.0774946379928312, -0.47250190102827516, -0.3872986840676189],
                        [0.012973548663457679, -0.004086394085369059, 0.33740430955333495, -0.5213057323424451, 1.0412639837912003],
                        [-1.5579284648683225, -0.9245209910953642, 1.3307326061368494, 0.06747475875561948, -0.0755840303200257],
                        [-1.545614672052386, 1.3960536795746794, -0.03356658802340015, -0.6831648469501141, 0.38616385993716174],
                        [-0.19788835903829885, 0.4797638096853567, 0.31400598937253754, -0.8205673225764165, 0.15711315576834473],
                        [-0.5741889761628616, -1.2475056382777316, 0.2688510727765674, -0.7675625990270905, 0.29641224812013633],
                        [1.229212227767127, -0.06575128821292409, 0.26624953826938746, -0.09062364710446447, 0.5085431285509379],
                        [-1.0537791186196406, -0.2564525773586528, -0.5819729689059381, -0.158264879014929, 1.5653478732293404],
                        [0.1123245126394361, 0.3990216924110555, 0.4354105078838362, -0.7618222692666208, 2.13685198394758],
                        [-0.13325435413459275, 0.5962260349838844, -1.1650751182302885, 0.5263967650981893, 0.8563807908530519],
                        [-0.06117589779128174, -1.5242258787749692, 0.3260809909775218, 1.5238058026511911, -0.10548742938556066],
                        [0.2889499703313658, -0.3802745334408804, 0.6235040860742003, -0.38771128734504967, 0.43473974024774065],
                        [-0.22519043413554374, -0.36922888908355134, 0.8927481875244578, -0.16412417555924597, -0.828949490836097],
                        [-0.22464602605263106, -0.5005088284252188, -0.22923764452899786, -0.4308945707115205, -0.49067719060947984],
                        [0.01957028047887438, -0.8139494649859011, -0.25437101630893355, -0.41586399891206416, -0.30360271682284595],
                    ],
                    rows: 49,
                    cols: 5,
                },
                {
                    data: [
                        [0.3142075212798332, -0.11394854749559968, -0.05981944112942461, -0.048106773258087064, 1.6808366079260413],
                        [0.9125575170967282, 0.06981758269267013, 1.143672350823119, -1.1573680995023676, -1.3202096451984464],
                        [-0.4663682198556196, -0.8947031757397403, 0.2508065918230289, -1.0002632515363061, 0.8364666487413985],
                        [-0.21766719170145588, 0.5551087853769918, -1.5629150581947469, 0.06421235311074236, -0.6913939592520082],
                        [-1.3315421786200483, 0.6087364885772863, -0.5438122701869204, 0.2925802403551909, -0.8553057913661589],
                    ],
                    rows: 5,
                    cols: 5,
                },
                {
                    data: [[0.6520904704325496], [0.9952827164189446], [0.49446040748046705], [-0.6928948412606907], [-0.48776000731929914]],
                    rows: 5,
                    cols: 1,
                },
            ],
            biases: [
                {
                    data: [[-0.5016815010661926, 0.21683763854888438, 0.5103007271665969, 0.5225453812891924, -0.24536501165934166]],
                    rows: 1,
                    cols: 5,
                },
                {
                    data: [[-1.0397523933366535, 0.8919110387859717, -0.833229760863714, 0.9718299140280349, -0.5739905508230487]],
                    rows: 1,
                    cols: 5,
                },
                {
                    data: [[0.14044969384422945]],
                    rows: 1,
                    cols: 1,
                },
            ],
        }),
        umpire,
        4
    );
let move_promise,
    thinking = !1;
function endGame() {
    finishMove(), (thinking = !0);
}
function finishMove() {
    (thinking = !1), $(".cover").addClass("d-none"), $(".cover").removeClass("darken d-flex");
}
async function displayBoard(t) {
    for (let o = 0; o < t.rows; o++)
        for (let e = 0; e < t.cols; e++) {
            let a = t.data[o][e];
            0 != a &&
                ($(`[row=${o}][col=${e}].box circle`).css({ background: a < 0 ? "red" : "blue", opacity: 1 }),
                $(`[row=${o}][col=${e}].box`).css("background", "var(--primary-light)"),
                $(`[row=${o}][col=${e}].box`).hasClass("taken") || $(`[row=${o}][col=${e}].box`).addClass("taken"));
        }
}
async function animateMove(t, o) {
    (t = parseInt(t)),
        (distance = $("#board").offset().top - $(`[row=${t}][col=${o}].box circle`).offset().top),
        $(`[row=${t}][col=${o}].box circle`).css("transform", `translate(0,${distance}px`),
        await new Promise((t) => setTimeout(t, 100)),
        $(`[row=${t}][col=${o}].box circle`).css("transition", `transform ${Math.sqrt(-1 * distance) / 100}s cubic-bezier(.3,0,.69,.17)`),
        $(`[row=${t}][col=${o}].box circle`).css("transform", "translate(0,0)");
}
function resize() {
    $("#board").height($("#board").width());
}
umpire.challenge(player),
    $(window).resize(resize),
    resize(),
    $("td.box").on("mouseover", function () {
        !thinking &&
            $(`[col=${$(this).attr("col")}]:not(.taken)`).length > 0 &&
            ($(`[col=${$(this).attr("col")}]:not(.taken)`).css("background", "var(--base)"),
            $(`[row=${Object.values($(`[col=${$(this).attr("col")}]:not(.taken)`)).reduce((t, o) => Math.max(t, $(o).attr("row") || 0), 0)}][col=${$(this).attr("col")}] circle`).css({
                opacity: "0.3",
                background: "red",
            }));
    }),
    $("td.box").on("click", function () {
        !thinking &&
            $(`[col=${$(this).attr("col")}]:not(.taken)`).length > 0 &&
            (move_promise([Object.values($(`[col=${$(this).attr("col")}]:not(.taken)`)).reduce((t, o) => Math.max(t, $(o).attr("row") || 0), 0), $(this).attr("col")]),
            (thinking = !0),
            $(".cover").removeClass("d-none"),
            $(".cover").addClass("darken d-flex"),
            $(".box:not(.taken) circle").css("background", "transparent"),
            $(".box").css("background", "var(--primary-light)"));
    }),
    $("td.box").on("mouseout", function () {
        $(`[col=${$(this).attr("col")}]:not(.taken)`).length > 0 &&
            ($(`[col=${$(this).attr("col")}]:not(.taken)`).css("background", "var(--primary-light)"),
            $(`[row=${Object.values($(`[col=${$(this).attr("col")}]:not(.taken)`)).reduce((t, o) => Math.max(t, $(o).attr("row") || 0), 0)}][col=${$(this).attr("col")}] circle`).css({
                background: "transparent",
            }));
    });
