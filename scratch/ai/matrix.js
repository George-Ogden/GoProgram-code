class Matrix{constructor(b=0,c=0){this.data=[],this.rows=b,this.cols=c;for(let a=0;a<b;a++){this.data.push([]);for(let d=0;d<c;d++)this.data[a].push(1)}this.randomise()}static blank(b,c,d=0){let a=new Matrix(b,c);return a.reset(d),a}static fromArray(a){let b=new Matrix(a.length,a[0].length);return b.data=a,b}set(a){a=Matrix.fromArray(a.data),this.rows=a.rows,this.cols=a.cols,this.data=a.data}show(){return console.table(this.data),this.data}map(e,f=null){if(f){let g=new Matrix(this.rows,this.cols);for(let a=0;a<this.rows;a++)for(let b=0;b<this.cols;b++)g.data[a][b]=e(this.data[a][b],f.data[a][b]);return g}for(let c=0;c<this.rows;c++)for(let d=0;d<this.cols;d++)this.data[c][d]=e(this.data[c][d])}static map(b,c){let a=b.copy();return a.map(c),a}randomise(){this.map(a=>2*Math.random()-1)}reset(a=0){this.map(()=>a)}transpose(){this.set(Matrix.transpose(this))}static transpose(a){let d=new Matrix(a.cols,a.rows);for(let b=0;b<a.rows;b++)for(let c=0;c<a.cols;c++)d.data[c][b]=a.data[b][c];return d}static add(a,b){return a.map((a,b)=>a+b,b)}add(a){this.set(Matrix.add(this,a))}static subtract(a,b){return a.map((a,b)=>a-b,b)}subtract(a){this.set(Matrix.subtract(this,a))}multiply(a){"number"==typeof a?this.map(b=>b*a):this.set(this.map((a,b)=>a*b,a))}static multiply(b,c){let a=b.copy();return a.multiply(c),a}static dot(a,f){if(a.cols=f.rows){let b=new Matrix(a.rows,f.cols);for(let c=0;c<b.rows;c++)for(let d=0;d<b.cols;d++){let g=0;for(let e=0;e<a.cols;e++)g+=a.data[c][e]*f.data[e][d];b.data[c][d]=g}return b}}dot(a){this.set(Matrix.dot(this,a))}clip(b,a=Matrix.blank(this.rows,this.cols,1)){this.set(this.map((a,c)=>Math.abs(a)>Math.abs(c*b)?a>0?Math.abs(c*b):-Math.abs(c*b):a,a))}static clip(b,c,d=Matrix.blank(this.rows,this.cols,1)){let a=b.copy();return a.clip(c,d),a}rss(){return this.data.reduce((a,b)=>a+b.reduce((b,a)=>b+a*a,0),0)}subsection(c,d,e,f){let g=new Matrix(f,e);for(let a=d;a<d+f;a++)for(let b=c;b<c+e;b++)g.data[a-d][b-c]=this.data[a][b];return g}copy(){return Matrix.fromArray(eval(JSON.stringify(this.data)))}static pad(a,e=1,f=1){let d=new Matrix(a.rows+2*e,a.cols+2*f);d.reset();for(let b=0;b<a.rows;b++)for(let c=0;c<a.cols;c++)d.data[b+e][c+f]=a.data[b][c];return d}pad(a=1,b=1){this.set(Matrix.pad(this,a,b))}static flip(a,e=!0,f=!0){let d=new Matrix(a.rows,a.cols);for(let b=0;b<a.rows;b++)for(let c=0;c<a.cols;c++)d.data[b][c]=a.data[f?a.rows-b-1:b][e?a.cols-c-1:c];return d}flip(a=!0,b=!0){this.set(Matrix.flip(this,a,b))}sum(){return this.data.reduce((a,b)=>a+b.reduce((a,b)=>a+b,0),0)}abs_sum(){return this.data.reduce((a,b)=>a+b.reduce((a,b)=>a+Math.abs(b),0),0)}static flatten(a){let d=new Matrix(1,a.rows*a.cols);for(let b=0;b<a.rows;b++)for(let c=0;c<a.cols;c++)d.data[0][b*a.cols+c]=a.data[b][c];return d}flatten(){this.set(Matrix.flatten(this))}static resize(d,e,c){let f=new Matrix(e,c);for(let a=0;a<e;a++)for(let b=0;b<c;b++)f.data[a][b]=d.data[parseInt((a*c+b)/d.cols)][(a*c+b)%d.cols];return f}resize(c,a,b){this.set(Matrix.resize(this,a,b))}subsection(c,d,e=this.cols,f=this.rows){let g=new Matrix(f,e);for(let a=d;a<d+f;a++)for(let b=c;b<c+e;b++)g.data[a-d][b-c]=this.data[a][b];return g}static build(f,d,c){let e=new Matrix(d,c);for(let a=0;a<d;a++)for(let b=0;b<c;b++)e.data[a][b]=f.data[0][a*c+b];return e}build(a,b){this.set(Matrix.build(this,a,b))}copy(){return Matrix.fromArray(eval(JSON.stringify(this.data)))}max(){return this.data.reduce((a,b)=>Math.max(a,b.reduce((a,b)=>Math.max(a,b))),-1/0)}find(c){for(let a=0;a<this.rows;a++)for(let b=0;b<this.cols;b++)if(this.data[a][b]==c)return[a,b]}max_plot(){let a=new Matrix(this.rows,this.cols),b=this.max();return a.reset(),a.data[this.find(b)[0]][this.find(b)[1]]=1,a}static insert(e,c,f,g){let d=e.copy();for(let a=0;a<c.rows;a++)for(let b=0;b<c.cols;b++)d.data[a+g][b+f]=c.data[a][b];return d}insert(a,b,c){this.set(Matrix.insert(this,a,b,c))}equals(a){return this.rows==a.rows&&this.cols==a.cols&&this.data.reduce((b,c,d)=>b?c.reduce((b,c,e)=>b?c==a.data[d][e]:0,1):0,1)}static concat(a,c){let b=new Matrix(a.rows,a.cols+c.cols);return b.insert(a,0,0),b.insert(c,a.cols,0),b}concat(a){this.set(Matrix.concat(this,a))}static split(a,b){return[a.subsection(0,0,b),a.subsection(b,0,a.cols-b)]}}