class Max_Pooling extends Neural_Network{constructor(t,s,i,h,r=3){super("Max_Pooling","identity",1),this.x=t,this.y=s,this.dx=i,this.dy=h,this.colours=r}forward_propagate(t){let s=[];this.process=[];for(let i=0;i<this.colours;i++){s.push(new Matrix(Math.ceil(this.y/this.dx),Math.ceil(this.x/this.dx))),this.process.push(t[i].copy());for(let h=0;h<this.x;h+=this.dx)for(let r=0;r<this.y;r+=this.dy){let e=h+this.dx>=this.x?this.x-h:this.dx,o=r+this.dy>=this.y?this.y-r:this.dy;s[i].data[r/this.dy][h/this.dx]=t[i].subsection(h,r,e,o).max()}}return s}backward_propagate(t){for(let s=0;s<this.colours;s++){let i=new Matrix(this.y,this.x);for(let h=0;h<this.x;h+=this.dx)for(let r=0;r<this.y;r+=this.dy){let e=h+this.dx>=this.x?this.x-h:this.dx,o=r+this.dy>=this.y?this.y-r:this.dy;i.insert(Matrix.multiply(this.process[s].subsection(h,r,e,o).max_plot(),t[s].data[r/this.dy][h/this.dx]),h,r)}t[s].set(i)}return t}static from_string(t){return new Max_Pooling(t.x,t.y,t.dx,t.dy,t.colours)}}class Average_Pooling extends Neural_Network{constructor(t,s,i,h,r=3){super("Average_Pooling","identity",1),this.x=t,this.y=s,this.dx=i,this.dy=h,this.colours=r}forward_propagate(t){let s=[];for(let i=0;i<this.colours;i++){s.push(new Matrix(Math.ceil(this.y/this.dx),Math.ceil(this.x/this.dx)));for(let h=0;h<this.x;h+=this.dx)for(let r=0;r<this.y;r+=this.dy){let e=h+this.dx>=this.x?this.x-h:this.dx,o=r+this.dy>=this.y?this.y-r:this.dy;s[i].data[r/this.dy][h/this.dx]=t[i].subsection(h,r,e,o).sum()/(e*o)}}return s}backward_propagate(t){for(let s=0;s<this.colours;s++){let i=new Matrix(this.y,this.x);for(let h=0;h<this.x;h+=this.dx)for(let r=0;r<this.y;r+=this.dy){let e=h+this.dx>=this.x?this.x-h:this.dx,o=r+this.dy>=this.y?this.y-r:this.dy,x=new Matrix(o,e);x.reset(1),i.insert(Matrix.multiply(x,t[s].data[r/this.dy][h/this.dx]/(e*o)),h,r)}i.multiply(this.learning_rate),t[s].set(i)}return t}static from_string(t){return new Average_Pooling(t.x,t.y,t.dx,t.dy,t.colours)}}