class Genetic_Fully_Connected_Neural_Network extends Genetic_Neural_Network{constructor(t,i,e,s,h="tanh"){super("Genetic_Fully_Connected_Neural_Network",h),this.length=i+2,this.width=e,this.weights=[],this.biases=[];for(let t=0;t<this.length;t++)this.weights.push(Matrix.multiply(new Matrix(this.width,this.width),Math.sqrt(2/this.width))),this.biases.push(Matrix.multiply(new Matrix(1,this.width),Math.sqrt(2/this.width)));this.weights[0]=Matrix.multiply(new Matrix(t,this.width),Math.sqrt(2/this.width)),this.weights[this.length-1]=Matrix.multiply(new Matrix(this.width,s),Math.sqrt(2/this.width)),this.biases[this.length-1]=Matrix.multiply(new Matrix(1,s),Math.sqrt(4/s))}replicate(){return this.copy()}copy(){return Genetic_Fully_Connected_Neural_Network.from_string(eval("("+JSON.stringify(this)+")"))}static from_string(t){let i=new Genetic_Fully_Connected_Neural_Network(t.weights[0].rows,t.length-2,t.weights[0].cols,t.weights[t.weights.length-1].cols,t.activation_function_name,t.learning_rate);for(let e=0;e<i.length;e++)i.weights[e]=Matrix.fromArray(t.weights[e].data),i.biases[e]=Matrix.fromArray(t.biases[e].data);return i}forward_propagate(t){let i=t.copy();for(let t=0;t<this.length;t++)i.dot(this.weights[t]),i.add(this.biases[t]),i.map(this.activation_function.function);return i}}