class Genetic_Combined_Network extends Genetic_Neural_Network{constructor(t,e="Genetic_Combined_Network"){super(e),this.networks=[],this.length=t.length;for(let e=0;e<this.length;e++)this.networks.push(t[e])}forward_propagate(t){let e=t;for(let t=0;t<this.length;t++)e=this.networks[t].forward_propagate(e);return e}static crossover(network1,network2,weight=.5){let networks=[];network1=network1.copy(),network2=network2.copy();for(let i=0;i<network1.length;i++)networks.push(eval(network1.networks[i].type+".crossover(network1.networks[i],network2.networks[i],weight)"));return new Genetic_Combined_Network(networks).mutate(.01)}mutate(t=.05){let e=[];for(let r=0;r<this.length;r++)"function"==typeof this.networks[r].mutate&&e.push(this.networks[r].mutate(t));return new Genetic_Combined_Network(e)}static from_string(dict){return new Genetic_Combined_Network(dict.networks.map(x=>eval(x.type).from_string(x)),dict.type)}copy(){return Genetic_Combined_Network.from_string({networks:JSON.parse(JSON.stringify(this.networks))})}show(){for(let t=0;t<this.length;t++)this.networks[t].show()}replicate(){return this.copy()}}