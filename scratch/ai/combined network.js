class Combined_Network extends Neural_Network{constructor(t,e="Combined_Neural_Network"){super(e),this.networks=[],this.length=t.length;for(let e=0;e<this.length;e++)this.networks.push(t[e])}forward_propagate(t){this.process=[t.map(t=>t.copy())];for(let t=0;t<this.length;t++){let e=this.networks[t].forward_propagate(this.process[t]);this.process.push(e)}return this.process[this.length]}backward_propagate(t){for(let e=this.length-1;e>=0;e--)t=this.networks[e].backward_propagate(t)}update(){for(let t=0;t<this.length;t++)this.networks[t].update()}train(t,e=1,r=t.length){let s=Math.floor(Math.random()*t.length);for(let o=s;o<e*r+s;o++){for(let e=0;e<r;e++)this.backward_propagate(Matrix.subtract(t[(o+e)%t.length][1],this.forward_propagate(t[(o+e)%t.length][0])));this.update()}}static from_string(dict){return new Combined_Network(dict.networks.map(x=>eval(x.type).from_string(x)))}copy(){return Combined_Network.from_string(eval("("+JSON.stringify(this.networks))+")")}show(){for(let t=0;t<this.length;t++)this.networks[t].show()}}