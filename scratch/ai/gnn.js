class Genetic_Neural_Network{constructor(t,e="tanh"){this.type=t,this.activation_function_name=e,this.activation_function=activation_functions[e]}replicate(){return this.copy()}mutate(t=.1){let e=this.copy();for(let a=0;a<this.length;a++)e.weights[a].map(e=>Math.random()<t?e+2*Math.random()-1:e),e.biases[a].map(e=>Math.random()<t?e+2*Math.random()-1:e);return e}static crossover(t,e,a=.5){t=t.copy(),e=e.copy();for(let s=0;s<t.length;s++)t.weights[s].set(t.weights[s].map((t,e)=>Math.random()<a?t:e,e.weights[s])),t.biases[s].set(t.biases[s].map((t,e)=>Math.random()<a?t:e,e.biases[s]));return t.mutate(.02)}copy(){return eval(this.type).from_string(eval("("+JSON.stringify(this)+")"))}show(){console.log(this)}forward_propagate(t){}export(){let copy=eval("("+JSON.stringify(this)+")");return delete copy.process,JSON.stringify(copy)}}